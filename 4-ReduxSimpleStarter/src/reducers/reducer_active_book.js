// all reducers get two parameters: the current state and the action
//  -reducers are only ever called when there's an action
//  -state argument is not application state, but the state that this reducer is responsible for
//    -the state that gets passed here is only the state that was previously generated by the reducer
//    -so the same state that's being produced by these reducers is flowing back into it when an action occurs
export default function (state = null, action) {
  // ES6 syntax located here ^ that says if state comes in here undefined, set it to null instead

  // if we had just `state += 1` in here, state would get incremented every time an action occurred.
  // so, if 5 actions had been called in total, state would be at 5.
  switch (action.type) {
    case 'BOOK_SELECTED':
      return action.payload;

    //Redux likes to do a few actions on start up that would go through here, so if we start with state = null, we're not going to have a default state that's defined, which can cause some problems.
  }

  return state;

  //* We always want to return a fresh object. Never do something like:
  /*
    state.title = book.title;
    return state;
  */
}
